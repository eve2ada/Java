//Yi He
//11/29/2015
//CSE 143X
//TA:Rasika Bhalerao
//HW #9
//
//This program will uses a dictionary to find all combinations of words that
//have the same letters as a given phrase

import java.util.*;

public class Anagrams {
	private List<String> dic;	
	//map between letters and their numbers in dictionary
	private Map<String, LetterInventory> cur; 
	private List<String> result; // list for output
	
	//constructor of Anagrams, to initialize a new Anagrams object that will
	//use the given list as its dictionary.
	public Anagrams(List<String> dictionary){
		this.dic = dictionary;
		this.result = new ArrayList<String>();
		//map between words and their inventories
		this.cur = new HashMap<String, LetterInventory>();
		for(String word: dictionary){
			LetterInventory tempInventory = new LetterInventory(word);
			if(!this.cur.containsKey(word)){
				this.cur.put(word, tempInventory);
			}
		}
	}
	
	//to use recursive backtracking to find combinations of words that have 
	//the same letters as the given string
	public void print(String s, int max){
		//throw an IllegalArgumentException if max is less than 0
		if(max < 0){
			throw new IllegalArgumentException("Invalid max.");
		}
	
		//define a List for pruned dictionary
		List<String> prunedDic = new ArrayList<String>();
			
		//prune the letter inventory for performance
		prunedDic = this.pruneDictionary(this.dic, s);
		
		//generate letter inventory for s
		LetterInventory sInventory = new LetterInventory(s);
		//if sInventory is empty, print out directly
		if(sInventory.isEmpty()){
			System.out.println("[]");
		}
		else{
			this.printRecursion(prunedDic, max, sInventory);
			this.result.clear();
		}
	}
	
	//method for recursion
	private void printRecursion(List<String> prunedDic, int max, 
									LetterInventory sInventory){
		//temporary inventory to store current target inventory 
		LetterInventory tempInventory = sInventory;
		//go through all words in prunedDic to match s
		for(String word : prunedDic){
			tempInventory = sInventory.subtract(this.cur.get(word));				
			if(tempInventory != null){
				//current target inventory is empty, print out
				if(tempInventory.isEmpty()){
					if(max == 0 || this.result.size() < max){
						this.result.add(word);
						System.out.println(this.result);
						this.result.remove(word);
					}
				}
				//current target inventory is not empty, try to add next word
				//and recurse
				else{
					this.result.add(word);
					tempInventory = sInventory.subtract(this.cur.get(word));
					this.printRecursion(prunedDic, max, tempInventory);
				}
				this.result.remove(word);
			}
			else{
				tempInventory = sInventory;
			}
		}

	}
	
	//method to prune dictionary
	private List<String> pruneDictionary(List<String> dic, String s){
		//generate Letter Inventory for s
		LetterInventory sInventory = new LetterInventory(s);
		//list for output
		List<String> prunedDic = new ArrayList<String>();
		//go through all word in dictionary
		for(String word : dic){
			LetterInventory wInventory = this.cur.get(word);
			//if word is relevant to s, add to prunedDic
			if(sInventory.subtract(wInventory) != null){
				prunedDic.add(word);
			}			
		}
		return prunedDic;
	}
}
