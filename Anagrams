//Yi He
//11/29/2015
//CSE 143X
//TA:Rasika Bhalerao
//HW #9
//
//This program will uses a dictionary to find all combinations of words that
//have the same letters as a given phrase

import java.util.*;

public class Anagrams {
	private List<String> dic;	
	//map between letters and their numbers in dictionary
	private Map<String, LetterInventory> cur; 
	
	private List<String> result; // list for output
//	private LetterInventory inventory; //total letters from dictionary
//	private LetterInventory curInventory;//current letter inventory
	
	//constructor of Anagrams, to initialize a new Anagrams object that will
	//use the given list as its dictionary.
	public Anagrams(List<String> dictionary){
		this.dic = dictionary;
		this.result = new ArrayList<String>();
//		System.out.println("This is dictionary " + dictionary.toString());
		//map between letters and their numbers in dictionary
		this.cur = new HashMap<String, LetterInventory>();
		for(String word: dictionary){
			LetterInventory tempInventory = new LetterInventory(word);
			if(!this.cur.containsKey(word)){
				this.cur.put(word, tempInventory);
			}
		}
//		System.out.println("This is cur " + this.cur.toString());
	}
	
	//to use recursive backtracking to find combinations of words that have 
	//the same letters as the given string
	public void print(String s, int max){
		//throw an IllegalArgumentException if max is less than 0
		if(max < 0){
			throw new IllegalArgumentException("Invalid max.");
		}
		//generate targetInventory from given string
//		LetterInventory targetInventory = new LetterInventory(s);
		
		//define a List for pruned dictionary
		List<String> prunedDic = new ArrayList<String>();
			
		//prune the letter inventory for performance
//		System.out.println("This is curInventory " + this.curInventory.toString());
//		System.out.println("This is targetInventory " + targetInventory.toString());
		prunedDic = this.pruneDictionary(this.dic, s);
//		System.out.println("prunedDic is " + prunedDic);
		
		//generate letter inventory for s
		LetterInventory sInventory = new LetterInventory(s);
		if(sInventory.isEmpty()){
			System.out.println("[]");
		}
		else{
			this.printRecursion(prunedDic, max, sInventory);
			this.result.clear();
		}
	}
	
	//method for recursion
	private void printRecursion(List<String> prunedDic, int max, 
									LetterInventory sInventory){
		//define a List for output
//		List<String> result = new ArrayList<String>();		
			
		//if prunedDic list is empty or result has same to 
		//or more than max words, recursion ends
		LetterInventory tempInventory = sInventory;
//		boolean isMax = false; // to indicate if max number is reached
		for(String word : prunedDic){
			tempInventory = sInventory.subtract(this.cur.get(word));				
			if(tempInventory != null){
				if(tempInventory.isEmpty()){
					if(max == 0 || this.result.size() < max){
						this.result.add(word);
						System.out.println(this.result);
						this.result.remove(word);
					}
				}
//					else if(max != 0 && result.size() == max){
//						isMax = true;
//						System.out.println(this.result);
//					}
				else{
					this.result.add(word);

					tempInventory = sInventory.subtract(this.cur.get(word));
					this.printRecursion(prunedDic, max, tempInventory);
				}
				this.result.remove(word);
			}
			else{
				tempInventory = sInventory;
//				this.result.remove(word);
			}
//			this.result.remove(word);
		}

	}
	
	//method to prune dictionary
	private List<String> pruneDictionary(List<String> dic, String s){
		//generate Letter Inventory for s
		LetterInventory sInventory = new LetterInventory(s);
		//list for output
		List<String> prunedDic = new ArrayList<String>();
		//go through all word in dictionary
//		System.out.println("dictionary is " + dic);
		for(String word : dic){
			LetterInventory wInventory = this.cur.get(word);
			//if word is relevant to s, add to prunedDic
			if(sInventory.subtract(wInventory) != null){
				prunedDic.add(word);
			}			
		}
		return prunedDic;
	}
	

}
