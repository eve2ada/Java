//Yi He
//12/07/2015
//CSE 143X
//TA:Rasika Bhalerao
//HW #11
//
//This is a class representing a “huffman code” which is used to compress data

import java.io.*;
import java.util.*;

public class HuffmanCode {
	private PriorityQueue<HuffmanNode> pQueue;
	private HuffmanNode root;
	
	/*initialize a new HuffmanCode object using the algorithm described for 
	making a code from an array of frequencies.*/
	/*frequencies is an array of frequencies where frequences[i] is the count 
	of the character with ASCII value i*/
	public HuffmanCode(int[] frequencies){
		this.pQueue = new PriorityQueue<HuffmanNode>();
		
		for(int i = 0; i < frequencies.length; i ++){
			if(frequencies[i] != 0){
				this.pQueue.add(new HuffmanNode(i,frequencies[i]));
			}
		}
		
		this.generateTree(this.pQueue);
	}
	
	/*initialize a new HuffmanCode object by reading in a previously constructed
	code from a .code file*/
	public HuffmanCode(Scanner input){
		this.root = new HuffmanNode(-1,-1);
		HuffmanNode curNode = this.root;
		while(input.hasNextLine()){
			int character = Integer.parseInt(input.nextLine());
			String codes = input.nextLine();
			for(int i  = 0; i < codes.length() - 1; i++){
				if(codes.charAt(i) == '0'){
					if(curNode != null){
						if(curNode.left == null){
							curNode.left = new HuffmanNode(-1, -1);
							
						}
						else{
							curNode.left = this.change(curNode.left, -1);
						}
						curNode = curNode.left;
					}
				}
				else if(codes.charAt(i) == '1'){
					if(curNode != null){
						if(curNode.right == null){
							curNode.right = new HuffmanNode(-1, -1);
						}
						else{
							curNode.right = this.change(curNode.right, -1);
						}
						curNode = curNode.right;
					}
				}
			}
			if(codes.charAt(codes.length() - 1) == '0'){
				if(curNode.left == null){
					curNode.left = new HuffmanNode(character, -1);
				}
			}
			else if(codes.charAt(codes.length() - 1) == '1'){
				if(curNode.right == null){
					curNode.right = new HuffmanNode(character, -1);
				}
			}
			curNode = this.root;
		}
	}
	
	//helper to change current node in constructor with Scanner input
	private HuffmanNode change(HuffmanNode curNode, int character){
		HuffmanNode tempLeft = curNode.left;
		HuffmanNode tempRight = curNode.right;
		curNode = new HuffmanNode(character, -1);
		curNode.left = tempLeft;
		curNode.right = tempRight;
		return curNode;
	}
	
	//helper method to generate tree from priority queue
	private void generateTree(PriorityQueue<HuffmanNode> priorityQueue){
		while(priorityQueue.size() > 1){
			//First, remove the smallest two nodes from the priority queue
			HuffmanNode leftNode = priorityQueue.remove();
			HuffmanNode rightNode = priorityQueue.remove();
			//create a new node. The frequency is the sum of two nodes
			HuffmanNode curParent = new HuffmanNode(-1, leftNode.freq 
					+ rightNode.freq);
			curParent.left = leftNode;
			curParent.right = rightNode;
			
			//add new node back to the priority queue
			priorityQueue.add(curParent);
		}
		this.root = priorityQueue.remove();
	}
	
	
	/*method to store the current huffman codes to the given output stream in 
	 the standard format*/
	public void save(PrintStream output){
		this.saveHelper(this.root, "", output);
	}
	
	private void saveHelper(HuffmanNode cur, String s, PrintStream output){
		//If current node is a leaf
		if(cur.left == null && cur.right == null){
			//print ASCII code of current character
			output.println(cur.character);
			//then print Huffman codes
			output.println(s);
		}		
		else{
			if(cur.left != null){
				//add the value 0 or 1 to the end of s
				s += "0"; 			
				this.saveHelper(cur.left, s, output);
				s = s.substring(0, s.length() - 1);			
			}
			if(cur.right != null){
				s += "1";
				this.saveHelper(cur.right, s, output);
				s = s.substring(0, s.length() - 1);
			}
		}
	}
	
	/*method to read individual bits from the input stream and write the 
	 corresponding characters to the output
	 It should stop reading when the BitInputStream is empty. */
	public void translate(BitInputStream input, PrintStream output){
		HuffmanNode curNode = this.root;
		while(input.hasNextBit()){
			int curInt = input.nextBit();
			if(curInt == 0){
				if(curNode != null){
					curNode = curNode.left;
				}
			}
			else if(curInt == 1){
				if(curNode != null){
					curNode = curNode.right;
				}
			}
			
			if(curNode != null){
				if(curNode.left == null && curNode.right == null){
					output.write(curNode.character);
					curNode = this.root;
				}
			}
		}
	}
	/*
	private void translateHelper(HuffmanNode cur, BitInputStream input, 
			PrintStream output){
		while(input.hasNextBit()){
			int curInt = input.nextBit();
			if(curInt == 0){
				cur = cur.left;
				if(cur.left == null && cur.right == null){
					output.write((char)cur.character);
				}
				else{
					this.translateHelper(cur.left, input, output);
				}
			}
			else{
				output.print((char)cur.character);
				cur = cur.right;
				if(cur.left == null && cur.right == null){
					output.write((char)cur.character);
				}
				else{
					this.translateHelper(cur.right, input, output);
				}
			}
		}
	}*/
}
